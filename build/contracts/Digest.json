{
  "contractName": "Digest",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "data",
          "type": "bytes"
        },
        {
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An interface for contracts implementing a DNSSEC digest.\",\"methods\":{\"verify(bytes,bytes)\":{\"details\":\"Verifies a cryptographic hash.\",\"params\":{\"data\":\"The data to hash.\",\"hash\":\"The hash to compare to.\"},\"return\":\"True iff the hashed data matches the provided hash value.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/faycal/Desktop/cloud/DKIM-AUTH/contracts/digests/Digest.sol\":\"Digest\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/faycal/Desktop/cloud/DKIM-AUTH/contracts/digests/Digest.sol\":{\"keccak256\":\"0x9c73bd1de95c6e1fb2be523d337b4b704034037044968157c0480e1c3e00417a\",\"urls\":[\"bzzr://2b8e466186e79a7955d1ab04d2430c3d77f2a5c75ec1717f44b31de813e7abee\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity >0.4.23;\n\n/**\n* @dev An interface for contracts implementing a DNSSEC digest.\n*/\ninterface Digest {\n    /**\n    * @dev Verifies a cryptographic hash.\n    * @param data The data to hash.\n    * @param hash The hash to compare to.\n    * @return True iff the hashed data matches the provided hash value.\n    */\n    function verify(bytes calldata data, bytes calldata hash) external pure returns (bool);\n}\n",
  "sourcePath": "/home/faycal/Desktop/cloud/DKIM-AUTH/contracts/digests/Digest.sol",
  "ast": {
    "absolutePath": "/home/faycal/Desktop/cloud/DKIM-AUTH/contracts/digests/Digest.sol",
    "exportedSymbols": {
      "Digest": [
        1207
      ]
    },
    "id": 1208,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1197,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@dev An interface for contracts implementing a DNSSEC digest.",
        "fullyImplemented": false,
        "id": 1207,
        "linearizedBaseContracts": [
          1207
        ],
        "name": "Digest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@dev Verifies a cryptographic hash.\n@param data The data to hash.\n@param hash The hash to compare to.\n@return True iff the hashed data matches the provided hash value.",
            "id": 1206,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1199,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "343:19:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1198,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "343:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1201,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "364:19:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "364:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "342:42:8"
            },
            "returnParameters": {
              "id": 1205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1204,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "408:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1203,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "407:6:8"
            },
            "scope": 1207,
            "src": "327:87:8",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1208,
        "src": "97:319:8"
      }
    ],
    "src": "0:417:8"
  },
  "legacyAST": {
    "absolutePath": "/home/faycal/Desktop/cloud/DKIM-AUTH/contracts/digests/Digest.sol",
    "exportedSymbols": {
      "Digest": [
        1207
      ]
    },
    "id": 1208,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1197,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@dev An interface for contracts implementing a DNSSEC digest.",
        "fullyImplemented": false,
        "id": 1207,
        "linearizedBaseContracts": [
          1207
        ],
        "name": "Digest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@dev Verifies a cryptographic hash.\n@param data The data to hash.\n@param hash The hash to compare to.\n@return True iff the hashed data matches the provided hash value.",
            "id": 1206,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1199,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "343:19:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1198,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "343:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1201,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "364:19:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "364:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "342:42:8"
            },
            "returnParameters": {
              "id": 1205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1204,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1206,
                  "src": "408:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1203,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "407:6:8"
            },
            "scope": 1207,
            "src": "327:87:8",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1208,
        "src": "97:319:8"
      }
    ],
    "src": "0:417:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-11-02T20:38:23.366Z",
  "devdoc": {
    "details": "An interface for contracts implementing a DNSSEC digest.",
    "methods": {
      "verify(bytes,bytes)": {
        "details": "Verifies a cryptographic hash.",
        "params": {
          "data": "The data to hash.",
          "hash": "The hash to compare to."
        },
        "return": "True iff the hashed data matches the provided hash value."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}